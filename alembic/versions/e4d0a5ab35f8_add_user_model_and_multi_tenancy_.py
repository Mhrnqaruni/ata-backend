"""Add user model and multi-tenancy relationships

Revision ID: e4d0a5ab35f8
Revises: f8bb9a614c07
Create Date: 2025-09-06 00:18:47.295945

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
# --- [SUPERVISOR'S NOTE] ---
# Import the specific UUID type for clarity and consistency.
from sqlalchemy.dialects.postgresql import UUID


# revision identifiers, used by Alembic.
revision: str = 'e4d0a5ab35f8'
down_revision: Union[str, Sequence[str], None] = 'f8bb9a614c07'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', UUID(as_uuid=True), nullable=False), # Use the imported UUID type
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('full_name', sa.String(), nullable=True),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_full_name'), 'users', ['full_name'], unique=False)
    op.add_column('assessments', sa.Column('user_id', UUID(as_uuid=True), nullable=False)) # Use the imported UUID type
    op.create_index(op.f('ix_assessments_user_id'), 'assessments', ['user_id'], unique=False)
    op.create_foreign_key(None, 'assessments', 'users', ['user_id'], ['id'])
    
    # --- [THE FIX IS HERE] ---
    # This is the critical modification. We are telling PostgreSQL HOW to convert
    # the existing VARCHAR data into the UUID type.
    op.alter_column('chatsessions', 'user_id',
               existing_type=sa.VARCHAR(),
               type_=UUID(as_uuid=True),
               existing_nullable=False,
               postgresql_using='user_id::uuid')
    # --- [END OF FIX] ---

    op.create_foreign_key(None, 'chatsessions', 'users', ['user_id'], ['id'])
    op.add_column('classes', sa.Column('user_id', UUID(as_uuid=True), nullable=False)) # Use the imported UUID type
    op.create_index(op.f('ix_classes_user_id'), 'classes', ['user_id'], unique=False)
    op.create_foreign_key(None, 'classes', 'users', ['user_id'], ['id'])
    op.add_column('generations', sa.Column('user_id', UUID(as_uuid=True), nullable=False)) # Use the imported UUID type
    op.create_index(op.f('ix_generations_user_id'), 'generations', ['user_id'], unique=False)
    op.create_foreign_key(None, 'generations', 'users', ['user_id'], ['id'])
    op.alter_column('students', 'class_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('students', 'class_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_constraint(None, 'generations', type_='foreignkey')
    op.drop_index(op.f('ix_generations_user_id'), table_name='generations')
    op.drop_column('generations', 'user_id')
    op.drop_constraint(None, 'classes', type_='foreignkey')
    op.drop_index(op.f('ix_classes_user_id'), table_name='classes')
    op.drop_column('classes', 'user_id')
    op.drop_constraint(None, 'chatsessions', type_='foreignkey')

    # --- [THE FIX FOR REVERSIBILITY] ---
    # To make the downgrade function work, we also provide a hint on how
    # to convert the UUID back to a VARCHAR.
    op.alter_column('chatsessions', 'user_id',
               existing_type=UUID(as_uuid=True),
               type_=sa.VARCHAR(),
               existing_nullable=False,
               postgresql_using='user_id::varchar')
    # --- [END OF FIX] ---

    op.drop_constraint(None, 'assessments', type_='foreignkey')
    op.drop_index(op.f('ix_assessments_user_id'), table_name='assessments')
    op.drop_column('assessments', 'user_id')
    op.drop_index(op.f('ix_users_full_name'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###