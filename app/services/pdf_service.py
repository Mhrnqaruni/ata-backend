# /app/services/pdf_service.py

# --- Core Imports ---
from typing import Dict

# --- Third-Party Library Imports for PDF Generation ---
# This import is ONLY permitted in this file.
from fpdf import FPDF

# --- Custom PDF Class with Header/Footer ---
# Inheriting from FPDF allows us to define a reusable report structure.
class PDFReport(FPDF):
    """A custom PDF class to define a standard report header and footer."""
    def __init__(self, assessment_name: str, class_name: str, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.assessment_name = assessment_name
        self.class_name = class_name
        # Set a default font that will be used unless overridden.
        self.set_font("Helvetica", size=11)

    def header(self):
        """Defines the header content that appears automatically on every page."""
        self.set_font("Helvetica", "B", 16)
        self.cell(0, 10, "Assessment Report", ln=True, align="C")
        self.set_font("Helvetica", "", 12)
        self.cell(0, 8, f"{self.assessment_name} | {self.class_name}", ln=True, align="C")
        self.ln(10)
        self.line(self.get_x(), self.get_y(), self.w - self.get_x(), self.get_y())
        self.ln(5)

    def footer(self):
        """Defines the footer content that appears automatically on every page."""
        self.set_y(-15) # Position 1.5 cm from bottom
        self.set_font("Helvetica", "I", 8)
        # Page number text, e.g., "Page 1/3"
        self.cell(0, 10, f"Page {self.page_no()}/{{nb}}", align="L")
        # Branding text on the right
        self.cell(0, 10, "Report Generated by ATA", align="R")

# --- Core Public Function ---
def create_assessment_report(report_data: Dict) -> bytes:
    """
    Generates a personalized PDF assessment report from structured data.
    This is a synchronous, CPU-bound function that must be called via asyncio.to_thread.
    """
    try:
        # 1. Extract data, allowing KeyErrors to propagate if data is malformed.
        assessment_name = report_data["assessmentName"]
        class_name = report_data["className"]
        student_name = report_data["studentName"]
        final_grade = report_data["finalGrade"]
        questions = report_data["questions"]

        # 2. Instantiate our custom PDF class and add the first page.
        pdf = PDFReport(assessment_name=assessment_name, class_name=class_name)
        pdf.alias_nb_pages() # Enable total page count in footer.
        pdf.add_page()

        # 3. Render the Student Summary section.
        pdf.set_font("Helvetica", "B", 14)
        pdf.cell(0, 10, "Student Summary", ln=True)
        pdf.set_font("Helvetica", "", 12)
        pdf.cell(40, 8, "Student Name:")
        pdf.cell(0, 8, student_name, ln=True)
        pdf.cell(40, 8, "Final Grade:")
        pdf.set_font("Helvetica", "B", 12)
        pdf.cell(0, 8, f"{final_grade}%", ln=True)
        pdf.ln(10)

        # 4. Render the Question-by-Question Breakdown.
        pdf.set_font("Helvetica", "B", 14)
        pdf.cell(0, 10, "Detailed Breakdown", ln=True)
        
        for q in questions:
            pdf.line(pdf.get_x(), pdf.get_y(), pdf.w - pdf.get_x(), pdf.get_y())
            pdf.ln(5)

            # Use multi_cell for question and feedback text to handle automatic wrapping.
            pdf.set_font("Helvetica", "B", 11)
            pdf.multi_cell(0, 6, f"Question: {q['text']}")
            pdf.ln(2)

            pdf.set_font("Helvetica", "", 11)
            pdf.cell(20, 8, "Grade:")
            pdf.set_font("Helvetica", "B", 11)
            pdf.cell(0, 8, str(q['grade']), ln=True)

            pdf.set_font("Helvetica", "I", 11)
            pdf.multi_cell(0, 6, f"Feedback: {q['feedback']}")
            pdf.ln(5)

        # 5. Finalize and return the PDF as a raw bytes object.
        return pdf.output(dest='S').encode('latin-1')

    except KeyError as e:
        error_msg = f"PDF generation failed: Missing required key in report_data: {e}"
        print(f"ERROR: {error_msg}")
        raise ValueError(error_msg)
    except Exception as e:
        print(f"An unexpected error occurred during PDF generation: {e}")
        raise