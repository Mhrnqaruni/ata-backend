# /app/services/report_service.py

from typing import Dict
import io
from docx import Document
from docx.shared import Pt, Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH

def create_word_report(report_data: Dict) -> bytes:
    """
    Generates a personalized .docx assessment report from structured data.
    This is a synchronous, CPU-bound function.

    Args:
        report_data: A dictionary containing all data needed for the report.

    Returns:
        The raw binary content of the generated .docx file as a bytes object.
    """
    try:
        # 1. Extract data
        student_name = report_data["studentName"]
        final_grade = report_data["finalGrade"]
        questions = report_data["questions"]
        assessment_name = report_data["assessmentName"]
        class_name = report_data["className"]

        # 2. Create a new Document
        document = Document()

        # --- Header ---
        heading = document.add_heading('Assessment Report', level=1)
        heading.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        subtitle = document.add_paragraph(f"{assessment_name} | {class_name}")
        subtitle.alignment = WD_ALIGN_PARAGRAPH.CENTER
        
        document.add_paragraph() # Spacer

        # --- Student Summary ---
        document.add_heading('Student Summary', level=2)
        p_name = document.add_paragraph()
        p_name.add_run('Student Name: ').bold = True
        p_name.add_run(student_name)
        
        p_grade = document.add_paragraph()
        p_grade.add_run('Final Grade: ').bold = True
        p_grade.add_run(f"{final_grade}%").bold = True
        
        document.add_paragraph() # Spacer

        # --- Detailed Breakdown ---
        document.add_heading('Detailed Breakdown', level=2)
        
        for i, q in enumerate(questions):
            if i > 0:
                document.add_paragraph("_________________________") # Separator
            
            # Question Text
            q_text = document.add_paragraph()
            q_text.add_run(q['text']).bold = True

            # Grade
            p_q_grade = document.add_paragraph()
            p_q_grade.add_run('Grade: ').italic = True
            p_q_grade.add_run(str(q['grade'])).bold = True
            
            # Feedback
            p_q_feedback = document.add_paragraph()
            p_q_feedback.add_run('Feedback: ').italic = True
            p_q_feedback.add_run(q['feedback'])
            
            document.add_paragraph() # Spacer

        # --- Footer ---
        # python-docx does not have a simple built-in footer concept like fpdf2.
        # We will add it at the end of the main body for V1.
        document.add_paragraph("_________________________")
        footer = document.add_paragraph("Report Generated by ATA")
        footer.alignment = WD_ALIGN_PARAGRAPH.RIGHT
        for run in footer.runs:
            run.font.size = Pt(8)
            run.italic = True

        # 5. Save the document to an in-memory stream
        file_stream = io.BytesIO()
        document.save(file_stream)
        file_stream.seek(0) # Rewind the stream to the beginning

        return file_stream.read()

    except KeyError as e:
        error_msg = f"Missing required key in report_data for DOCX generation: {e}"
        print(f"ERROR: {error_msg}")
        raise ValueError(error_msg)
    except Exception as e:
        print(f"An unexpected error occurred during DOCX generation: {e}")
        raise