# /ata-backend/app/db/models/user_model.py

"""
This module defines the SQLAlchemy ORM model for the `User` entity.

The User model is the cornerstone of the authentication and multi-tenancy system.
It defines the `users` table schema, which stores user credentials and profile
information. It also establishes the critical one-to-many relationships that link
a user to all the data they own within the application (e.g., Classes, Assessments).
"""

import uuid
from sqlalchemy import Column, String, Boolean, DateTime
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func

from ..base_class import Base

class User(Base):
    """
    SQLAlchemy model representing a user in the database.
    """
    __tablename__ = "users"

    # --- Columns ---

    # The primary key, using a native database UUID type for performance and uniqueness.
    # The default value is generated by Python's uuid.uuid4 function on record creation.
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    
    # The user's email address, which is used for logging in.
    # It is unique and indexed for fast lookups.
    email = Column(String, unique=True, index=True, nullable=False)
    
    # The user's full name, for display purposes.
    full_name = Column(String, index=True, nullable=True)
    
    # The securely hashed version of the user's password.
    # Plain-text passwords are NEVER stored.
    hashed_password = Column(String, nullable=False)
    
    # A flag to enable or disable an account without deleting it.
    is_active = Column(Boolean(), default=True, nullable=False)
    
    # Timestamps for auditing, automatically managed by the database server.
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), server_default=func.now(), onupdate=func.now())


    # --- Relationships ---

    # Defines the one-to-many relationship from a User to their Classes.
    # `back_populates` links this to the `owner` relationship on the `Class` model.
    # `cascade` ensures that when a user is deleted, all of their classes are also
    # deleted automatically by the database, maintaining data integrity.
    classes = relationship(
        "Class", 
        back_populates="owner", 
        cascade="all, delete-orphan"
    )

    # Defines the one-to-many relationship to a user's Assessment jobs.
    assessments = relationship(
        "Assessment",
        back_populates="owner",
        cascade="all, delete-orphan"
    )
    
    # Defines the one-to-many relationship to a user's Chat Sessions.
    chat_sessions = relationship(
        "ChatSession",
        back_populates="owner",
        cascade="all, delete-orphan"
    )

    # Defines the one-to-many relationship to a user's saved AI Tool Generations.
    generations = relationship(
        "Generation",
        back_populates="owner",
        cascade="all, delete-orphan"
    )